# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'bundler/setup'

require 'araignee/utils/log'
require 'pry-byebug'
require 'simplecov'
require 'timeout'

lib = File.expand_path('../lib', __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

SimpleCov.start do
  add_group 'AI', 'araignee/ai'
  add_group 'Architecture', 'araignee/architecture'
  add_group 'Stories', 'araignee/story'
  add_group 'Utilities', 'araignee/utils'
  add_filter '/spec/'
end

Dir.glob(File.join(__dir__, 'spec_support', '*.rb')).each { |file| require file.to_s }

# enable logging
if ENV['development']
  stdout = Logger.new(STDOUT)

  Log[:default] = stdout
  Log[:default].formatter =
    proc do |_severity, _datetime, _progname, msg|
      "#{msg}\n"
    end

  Log[:architecture] = stdout
  Log[:architecture].formatter =
    proc do |severity, datetime, _progname, msg|
      date_format = datetime.strftime('%Y-%m-%d %H:%M:%S.%L')
      "#{date_format} #{severity.rjust(5)} | #{msg}\n"
    end

  Log[:ai] = stdout
  Log[:ai].formatter =
    proc do |_severity, _datetime, _progname, msg|
      "#{msg}\n"
    end
end

RSpec.configure do |config|
  # Enable flags like --only-failures and --next-failure
  config.example_status_persistence_file_path = '.rspec_status'

  # Disable RSpec exposing methods globally on `Module` and `main`
  config.disable_monkey_patching!

  config.expect_with :rspec do |c|
    c.syntax = :expect
  end

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed

  # Added timeout of 2 seconds because of Mutant Testing infinite loops
  # config.around do |example|
  #   Timeout.timeout(2, &example)
  # end
end
